<html>
    <!-- Header -->
    <head>
        <link rel="stylesheet" type="text/css" href="/assets/bootstrap/css/bootstrap.min.css" />
        <link rel="stylesheet" type="text/css" href="/assets/css/servertag.css" />

        <script type="text/javascript" src="/assets/js/jquery-1.7.1.min.js"></script>
        <script type="text/javascript" src="/assets/bootstrap/js/bootstrap.min.js"></script>
        <script type="text/javascript" src="/assets/js/jquery.dataTables.min.js"></script>
        <script type="text/javascript" charset="utf-8">
$(document).ready(function() {
    // ************ dataTables
    // Styling
    $.fn.dataTableExt.oStdClasses.sFilter = "dataTables_filter pull-left";
    // Allows us to disable pagination 
    $.fn.dataTableExt.oPagination.none = {
        fnInit: function(){},
        fnUpdate: function() {
            $('.dataTables_length').hide();
            $('.dataTables_info').hide();
            $('.dataTables_paginate').hide();
        }
    };
    // Initialize table
    $('.servertag-dataTable').dataTable({
        "bJQueryUI": false,
        // Custom pagination type defined above
        "sPaginationType": "none",
        // Override some text
        "oLanguage": {
            "sSearch": "",
            "sZeroRecords": "No matches"
        }
    });
    // More styling (needs to be done after table init)
    $('.dataTables_filter>input').attr('placeholder', 'Start typing to filter...')
                                 .attr('style', 'height: 28px;');
    $('.checkbox-cell').attr('style', 'width: 12px;');

    // *********** Multi-select on table rows
    // Callback to check all row boxes when the header box is checked
    $('.servertag-dataTable th>input').change(function() {
        $('td>input').prop('checked', $('th>input').prop('checked'));
    });

    // *********** Library
    // Finds out which hosts are checked
    function checkedHosts() {
        var hosts = new Array();
        $('input.servertag-host-checkbox:checked')
            .closest('tr')
            .each(function() {
                hosts.push($(this).attr('servertag-hostname'))
            });
        return hosts;
    }

    function tagsToAdd() {
        var tags = new Array();
        tags = ["herp", "derp"];
        return tags;
    }

    // Given a table cell (of the type .servertag-tag-cell), returns the
    // list of tags present in it, as strings.
    function extractTagsFromCell(cell) {
        return $(cell)
            .children('span.servertag-tag')
            .map(function(){
                return $(this).attr('servertag-tagname').toString();
                })
            .toArray();
    }

    // Turns the given array of tag names into an array of <span>
    // elements for display in our table.
    function tagNamesToSpans(tag_names) {
        return $(tag_names)
        .map(function(){
            // Map tag names to basic spans
            return $('<span>')
                .addClass('servertag-tag-cell label')
                .attr('servertag-tagname', this.toString())
                .text(this.toString());
            })
        .each(function(){
            // Mark exclusive tags (those with a ':') differently
            if (this.toString().indexOf(':') != -1) {
                t_span.addClass('label-info');
            }
            })
        .toArray();
    }

    // Adds the given tags to the given hosts with an Ajax call, then
    // modifies the table accordingly.
    function addTagsToHosts(hosts, new_tags) {
        // Update the table.
        $('.servertag-host-row>.servertag-tag-cell')
        .each(function(){
            // Associate each cell with the array of tags it now contains.
            tags = extractTagsFromCell(this)
                .concat(new_tags)
                .sort();

            // Find just the unique tag names.
            tag_hash = Array();
            $(tags).each(function(){
                tag_hash[this] = true
                });

            $(this).data().servertag_tags = keys(tag_hash);
            })
        .empty()
        .each(function(){
            // Make new tag spans for each tag the cell now contains.
            $(this).append(tagNamesToSpans($(this).data().servertag_tags)).join("\n");
        });
    }

    // *********** Callbacks
    // Called on a click of the "Add Tags" button. Opens the modal.
    function addTagsModalOpen() {
        hosts = checkedHosts();
        if (hosts.length == 0) {
            $('#no-hosts-checked-alert').show();
            return;
        }

        $('#add-tags-modal').modal('show');
    }

    // Called when "Add Tags" modal is submitted. Adds the tags via Ajax.
    function addTagsModalSubmit() {
        hosts = checkedHosts();
        tags = tagsToAdd();
        if (tags.length == 0) {
            $('#no-tags-specified-alert').show();
            return;
        }

        addTagsToHosts(hosts, tags);
        $('#add-tags-modal').modal('hide');
    }

    // *********** Callback assignments
    $('#add-tags-btn').click(function() {addTagsModalOpen();});
    $('#add-tags-submit').click(function() {addTagsModalSubmit();});
});
    </script>

    </head>
